Comandos para clonar o repo:
 inicializar no dir: git init
 adicionar todos os files: git add .
 commit: git commit -m "Add import BrowserModule"
 clone: git remote add origin https://github.com/antoni0caldeira/AngularForms.git
 push: git push -u origin master


Instalar o bootstrap: npm install --save bootstrap
adicionar o path a angular json: "node_modules/bootstrap/dist/css/bootstrap.min.css",

aceder à class ngform: adicionar #form="ngForm"
ver as propriedades: {{ form | json }}
adicionar ngModel
ver as propriedades: {{ form.value | json }}

two way databinding banana in a box : [(ngModel)]="userSettings.name"

copying form data
spread operador userSettings : UserSettings = { ...this.OriginalUserSettings};

html validation attributes
required
pattern
minlength maxlength min max

ngNativeValidate for browser validation


CSS validation classes

adicionar #name aos inputs

ng-untouched ng-touched
ng-pristine ng-dirty
ng-valid ng-invalid

ngModel Validations

adicionar #name="ngModel" aos inputs

untouched touched
pristine dirty
valid invalid

Styling forms with validation errors

[hidden]="name.valid || name.untouched"

Submitting forms

<form #form="ngForm" (ngSubmit)="onSubmit(form)">
criar metodo
  onSubmit(form: NgForm){
    alert(`in on submit ${form.valid}`)  }

Handling form control events

blur adicionar (blur)="onBlur(name)" ao input


chapter 7 HTTP Posting & Data Access

Creating a data service: ng g s data
criar metodo no data.service.this
postUserSettingsForm(userSettings: UserSettings)

Form post using observables

adicionar um observable ao metodo no service postUserSettingsForm(userSettings: UserSettings) : Observable<UserSettings>
                                                return of(userSettings);
adicionar um observable ao metodo no component constructor(private dataService: DataService)
adicionar o observable this.dataService.postUserSettingsForm(this.userSettings);
subscrever o observable     this.dataService.postUserSettingsForm(this.userSettings).subscribe();
passar funções ao observable com 2 resultados    this.dataService.postUserSettingsForm(this.userSettings).subscribe(
                                                          success => console.log(`It works: `, success),
                                                          error => console.log(`It doesn't work: ` ,error));


HTTP access using httpClient
import HttpClientModule na app.module.ts
no service injeta-se constructor(private http: HttpClient) { }
de seguida no metodo passa-se o endereço e os dados     postUserSettingsForm(userSettings: UserSettings) : Observable<any>{
                                                          return this.http.post('url', userSettings);

Posting a form   on putsreq.com

var parsedBody = JSON.parse(request.body);
parsedBody.id = '1';
response.body = parsedBody;










